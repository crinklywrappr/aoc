(ns crinklywrappr.aoc-test
  (:require [clojure.test :refer :all]
            [crinklywrappr.aoc.2023.day5 :as d5]))

(deftest lookup-values-part2
  (let [f (d5/lookup-values 0 50 10)]
    (testing "straight conversion"
      (is (= [[[0 10]] []] (f [[] []] [50 10])))
      (is (= [[[0 5]] []] (f [[] []] [50 5])))
      (is (= [[[5 5]] []] (f [[] []] [55 5])))
      (is (= [[[0 1]] []] (f [[] []] [50 1])))
      (is (= [[[9 1]] []] (f [[] []] [59 1]))))
    (testing "left side out, right side in"
      (is (= [[[0 5]] [[45 5]]] (f [[] []] [45 10])))
      (is (= [[[0 10]] [[45 5]]] (f [[] []] [45 15])))
      (is (= [[[0 1]] [[45 5]]] (f [[] []] [45 6])))
      (is (= [[[0 1]] [[49 1]]] (f [[] []] [49 2]))))
    (testing "left side in, right side out"
      (is (= [[[5 5]] [[60 5]]] (f [[] []] [55 10])))
      (is (= [[[0 10]] [[60 5]]] (f [[] []] [50 15])))
      (is (= [[[9 1]] [[60 4]]] (f [[] []] [59 5])))
      (is (= [[[9 1]] [[60 1]]] (f [[] []] [59 2]))))
    (testing "three-way split"
      (is (= [[[0 10]] [[45 5] [60 5]]] (f [[] []] [45 20])))
      (is (= [[[0 10]] [[49 1] [60 1]]] (f [[] []] [49 12]))))
    (testing "not found"
      (is (= [[] [[49 1]]] (f [[] []] [49 1])))
      (is (= [[] [[40 5]]] (f [[] []] [40 5])))
      (is (= [[] [[61 1]]] (f [[] []] [61 1])))
      (is (= [[] [[65 5]]] (f [[] []] [65 5])))
      (is (= [[] [[45 5]]] (f [[] []] [45 5])))
      (is (= [[] [[49 1]]] (f [[] []] [49 1])))
      (is (= [[] [[60 5]]] (f [[] []] [60 5])))
      (is (= [[] [[60 1]]] (f [[] []] [60 1]))))))
